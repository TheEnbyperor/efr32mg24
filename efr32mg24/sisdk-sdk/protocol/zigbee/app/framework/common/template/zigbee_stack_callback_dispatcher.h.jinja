/*****************************************************************************/
/**
 * Copyright 2020 Silicon Laboratories, Inc.
 *
 *****************************************************************************/
//
// *** Generated file. Do not edit! ***
//

#include PLATFORM_HEADER
#ifdef EZSP_HOST
#include "stack/include/sl_zigbee_types.h"
#else
#include "stack/include/sl_zigbee.h"
#endif // EZSP_HOST


{# AF_SUPPORT_INCOMING_MESSAGE #}
#if defined(SL_ZIGBEE_AF_NCP) && defined(SL_CATALOG_ZIGBEE_AF_SUPPORT_PRESENT)
// Incoming Message
bool sli_zb_af_support_incoming_message(
      // The aps Frame
      sl_zigbee_aps_frame_t *apsFrame);
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "af_support_incoming_message" -%}
bool {{ cb['function_name'] }}(
      // The aps Frame
      sl_zigbee_aps_frame_t *apsFrame)
;
{% endif -%}
{% endfor -%}
#endif // defined(SL_ZIGBEE_AF_NCP) && defined(SL_CATALOG_ZIGBEE_AF_SUPPORT_PRESENT)

{# INCOMING_MESSAGE #}
// Incoming Message
void sli_zb_af_incoming_message(
      // Incoming message type
      sl_zigbee_incoming_message_type_t type,
      // The aps Frame
      sl_zigbee_aps_frame_t *apsFrame,
      // Received packet information
      sl_zigbee_rx_packet_info_t *packetInfo,
      // Message length
      uint8_t messageLength,
      // Message pointer
      uint8_t *message)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "incoming_message" -%}
void {{ cb['function_name'] }}(
      // Incoming message type
      sl_zigbee_incoming_message_type_t type,
      // The aps Frame
      sl_zigbee_aps_frame_t *apsFrame,
      // Received packet information
      sl_zigbee_rx_packet_info_t *packetInfo,
      // Message length
      uint8_t messageLength,
      // Message pointer
      uint8_t *message)
;
{% endif -%}
{% endfor -%}

{# MESSAGE_SENT #}
// Message Sent
void sli_zigbee_af_message_sent(
      // Message delivery status
      sl_status_t status,
      // Outgoing message type
      sl_zigbee_outgoing_message_type_t type,
      // Index or destination of the message
      uint16_t indexOrDestination,
      // The aps Frame
      sl_zigbee_aps_frame_t *apsFrame,
      // Message tag
      uint16_t messageTag,
      // The length of the message
      uint8_t messageLength,
      // Message data
      uint8_t *message)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "message_sent" -%}
void {{ cb['function_name'] }}(
      // Message delivery status
      sl_status_t status,
      // Outgoing message type
      sl_zigbee_outgoing_message_type_t type,
      // Index or destination of the message
      uint16_t indexOrDestination,
      // The aps Frame
      sl_zigbee_aps_frame_t *apsFrame,
      // Message tag
      uint16_t messageTag,
      // The length of the message
      uint8_t messageLength,
      // Message data
      uint8_t *message)
;
{% endif -%}
{% endfor -%}

{# TRUST_CENTER_POST_JOIN #}
// Trust Center post-join handler
void sli_zigbee_af_trust_center_post_join(
      // Joining node's id
      sl_802154_short_addr_t newNodeId,
      // Joining node's Eui64
      sl_802154_long_addr_t newNodeEui64,
      // Status
      sl_zigbee_device_update_t status,
      // Policy Decision
      sl_zigbee_join_decision_t policyDecision,
      // Parent Id of the joining node
      sl_802154_short_addr_t parentOfNewNode)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "trust_center_post_join" -%}
void {{ cb['function_name'] }}(
      // Joining node's id
      sl_802154_short_addr_t newNodeId,
      // Joining node's Eui64
      sl_802154_long_addr_t newNodeEui64,
      // Status
      sl_zigbee_device_update_t status,
      // Policy Decision
      sl_zigbee_join_decision_t policyDecision,
      // Parent Id of the joining node
      sl_802154_short_addr_t parentOfNewNode)
;
{% endif -%}
{% endfor -%}


{# MARK_BUFFERS #}
// Mark Buffers
void sli_zigbee_af_mark_buffers(void)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "mark_buffers" -%}
void {{ cb['function_name'] }}(void)
;
{% endif -%}
{% endfor -%}


{# PACKET_HANDOFF_INCOMING #}
// Packet Handoff Incoming
void sli_zigbee_af_packet_handoff_incoming(
      sl_zigbee_zigbee_packet_type_t packetType,
      sli_buffer_manager_buffer_t packetBuffer,
      uint8_t index,
      // Return: 
      void *data)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "packet_handoff_incoming" -%}
void {{ cb['function_name'] }}(
      sl_zigbee_zigbee_packet_type_t packetType,
      sli_buffer_manager_buffer_t packetBuffer,
      uint8_t index,
      // Return: 
      void *data)
;
{% endif -%}
{% endfor -%}


{# PACKET_HANDOFF_OUTGOING #}
// Packet Handoff Outgoing
void sli_zigbee_af_packet_handoff_outgoing(
      sl_zigbee_zigbee_packet_type_t packetType,
      sli_buffer_manager_buffer_t packetBuffer,
      uint8_t index,
      // Return: 
      void *data)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "packet_handoff_outgoing" -%}
void {{ cb['function_name'] }}(
      sl_zigbee_zigbee_packet_type_t packetType,
      sli_buffer_manager_buffer_t packetBuffer,
      uint8_t index,
      // Return: 
      void *data)
;
{% endif -%}
{% endfor -%}


{# INCOMING_MFG_TEST_MESSAGE #}
// Incoming Mfg Test Message
void sli_zigbee_af_incoming_mfg_test_message(
      uint8_t messageType,
      uint8_t dataLength,
      // Return: 
      uint8_t *data)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "incoming_mfg_test_message" -%}
void {{ cb['function_name'] }}(
      uint8_t messageType,
      uint8_t dataLength,
      // Return: 
      uint8_t *data)
;
{% endif -%}
{% endfor -%}


{# OVERRIDE_INCOMING_ROUTE_RECORD #}
// Override Incoming Route Record
void sli_zigbee_af_override_incoming_route_record(
  sl_zigbee_rx_packet_info_t *packetInfo,
  uint8_t relayCount,
  uint8_t *relayList,
      // Return: 
      bool *consumed)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "override_incoming_route_record" -%}
void {{ cb['function_name'] }}(
      sl_zigbee_rx_packet_info_t *packetInfo,
  uint8_t relayCount,
  uint8_t *relayList,
      // Return: 
      bool *consumed)
;
{% endif -%}
{% endfor -%}


{# OVERRIDE_APPEND_SOURCE_ROUTE #}
// Override Append Source Route
// Return: Added bytes
void sli_zigbee_af_override_append_source_route(
      sl_802154_short_addr_t destination,
      // Return: 
      sli_buffer_manager_buffer_t *header,
      // Return: 
      bool *consumed)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "override_append_source_route" -%}
void {{ cb['function_name'] }}(
      sl_802154_short_addr_t destination,
      // Return: 
      sli_buffer_manager_buffer_t *header,
      // Return: 
      bool *consumed)
;
{% endif -%}
{% endfor -%}


{# OVERRIDE_FURTHUR_INDEX_FOR_SOURCE_ROUTE_ADD_ENTRY #}
// Override Furthur Index For Source Route Add Entry
void sli_zigbee_af_override_furthur_index_for_source_route_add_entry(
      sl_802154_short_addr_t id,
      // Return: 
      uint8_t *furtherIndex)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "override_furthur_index_for_source_route_add_entry" -%}
void {{ cb['function_name'] }}(
      sl_802154_short_addr_t id,
      // Return: 
      uint8_t *furtherIndex)
;
{% endif -%}
{% endfor -%}


{# STACK_STATUS #}
// Stack Status
void sli_zigbee_af_stack_status(
      // Stack status
      sl_status_t status)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "stack_status" -%}
void {{ cb['function_name'] }}(
      // Stack status
      sl_status_t status)
;
{% endif -%}
{% endfor -%}


{# REDIRECT_OUTGOING_MESSAGE #}
// Redirect Outgoing Message
void sli_zigbee_af_redirect_outgoing_message(
      // The mac index used to redirect messages
      uint8_t mac_index,
      // Packet length
      uint8_t packet_length,
      // Packet contents
      uint8_t* packet_contents,
      // Transmit priority
      uint8_t priority)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "redirect_outgoing_message" -%}
void {{ cb['function_name'] }}(
      // The mac index used to redirect messages
      uint8_t mac_index,
      // Packet length
      uint8_t packet_length,
      // Packet contents
      uint8_t* packet_contents,
      // Transmit priority
      uint8_t priority)
;
{% endif -%}
{% endfor -%}


{# ENERGY_SCAN_RESULT #}
// Energy Scan Result
void sli_zigbee_af_energy_scan_result(
      // The 802.15.4 channel number that was scanned.
      uint8_t channel,
      // The maximum RSSI value found on the channel.
      int8_t maxRssiValue)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "energy_scan_result" -%}
void {{ cb['function_name'] }}(
      // The 802.15.4 channel number that was scanned.
      uint8_t channel,
      // The maximum RSSI value found on the channel.
      int8_t maxRssiValue)
;
{% endif -%}
{% endfor -%}


{# NETWORK_FOUND #}
// Network Found
void sli_zigbee_af_network_found(
      // The parameters associated with the network found.
      sl_zigbee_zigbee_network_t *networkFound,
      // The link quality indication of the network found.
      uint8_t lqi,
      // The received signal strength indication of the network found.
      int8_t rssi)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "network_found" -%}
void {{ cb['function_name'] }}(
      // The parameters associated with the network found.
      sl_zigbee_zigbee_network_t *networkFound,
      // The link quality indication of the network found.
      uint8_t lqi,
      // The received signal strength indication of the network found.
      int8_t rssi)
;
{% endif -%}
{% endfor -%}


{# SCAN_COMPLETE #}
// Scan Complete
void sli_zigbee_af_scan_complete(
      // The channel on which the current error occurred. Undefined for the case
      // of SL_STATUS_OK.
      uint8_t channel,
      // The error condition that occurred on the current channel. Value will be
      // SL_STATUS_OK when the scan has completed.
      sl_status_t status)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "scan_complete" -%}
void {{ cb['function_name'] }}(
      // The channel on which the current error occurred. Undefined for the case
      // of SL_STATUS_OK.
      uint8_t channel,
      // The error condition that occurred on the current channel. Value will be
      // SL_STATUS_OK when the scan has completed.
      sl_status_t status)
;
{% endif -%}
{% endfor -%}


{# UNUSED_PAN_ID_FOUND #}
// Unused Pan Id Found
void sli_zigbee_af_unused_pan_id_found(
      // The unused panID which has been found.
      sl_802154_pan_id_t panId,
      // The channel that the unused panID was found on.
      uint8_t channel)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "unused_pan_id_found" -%}
void {{ cb['function_name'] }}(
      // The unused panID which has been found.
      sl_802154_pan_id_t panId,
      // The channel that the unused panID was found on.
      uint8_t channel)
;
{% endif -%}
{% endfor -%}


{# CHILD_JOIN #}
// Child Join
void sli_zigbee_af_child_join(
      // The index of the child of interest.
      uint8_t index,
      // True if the child is joining. False the child is leaving.
      bool joining,
      // The node ID of the child.
      sl_802154_short_addr_t childId,
      // The EUI64 of the child.
      sl_802154_long_addr_t childEui64,
      // The node type of the child.
      sl_zigbee_node_type_t childType)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "child_join" -%}
void {{ cb['function_name'] }}(
      // The index of the child of interest.
      uint8_t index,
      // True if the child is joining. False the child is leaving.
      bool joining,
      // The node ID of the child.
      sl_802154_short_addr_t childId,
      // The EUI64 of the child.
      sl_802154_long_addr_t childEui64,
      // The node type of the child.
      sl_zigbee_node_type_t childType)
;
{% endif -%}
{% endfor -%}


{# DUTY_CYCLE #}
// Duty Cycle
void sli_zigbee_af_duty_cycle(
      // The channel page whose duty cycle state has changed.
      uint8_t channelPage,
      // The channel number whose duty cycle state has changed.
      uint8_t channel,
      // The current duty cycle state.
      sl_zigbee_duty_cycle_state_t state,
      // The total number of connected end devices that are being monitored for
      // duty cycle.
      uint8_t totalDevices,
      // Consumed duty cycles of end devices that are being monitored. The first
      // entry always be the local stack's nodeId, and thus the total aggregate
      // duty cycle for the device.
      sl_zigbee_per_device_duty_cycle_t *arrayOfDeviceDutyCycles)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "duty_cycle" -%}
void {{ cb['function_name'] }}(
      // The channel page whose duty cycle state has changed.
      uint8_t channelPage,
      // The channel number whose duty cycle state has changed.
      uint8_t channel,
      // The current duty cycle state.
      sl_zigbee_duty_cycle_state_t state,
      // The total number of connected end devices that are being monitored for
      // duty cycle.
      uint8_t totalDevices,
      // Consumed duty cycles of end devices that are being monitored. The first
      // entry always be the local stack's nodeId, and thus the total aggregate
      // duty cycle for the device.
      sl_zigbee_per_device_duty_cycle_t *arrayOfDeviceDutyCycles)
;
{% endif -%}
{% endfor -%}


{# REMOTE_SET_BINDING #}
// Remote Set Binding
void sli_zigbee_af_remote_set_binding(
      // The contents of the binding entry.
      sl_zigbee_binding_table_entry_t *entry,
      // ZDO response status.
      sl_zigbee_zdo_status_t status)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "remote_set_binding" -%}
void {{ cb['function_name'] }}(
      // The contents of the binding entry.
      sl_zigbee_binding_table_entry_t *entry,
      // ZDO response status.
      sl_zigbee_zdo_status_t status)
;
{% endif -%}
{% endfor -%}


{# REMOTE_DELETE_BINDING #}
// Remote Delete Binding
void sli_zigbee_af_remote_delete_binding(
      // The index of the binding whose deletion was requested.
      uint8_t index,
      // ZDO response status
      sl_zigbee_zdo_status_t status)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "remote_delete_binding" -%}
void {{ cb['function_name'] }}(
      // The index of the binding whose deletion was requested.
      uint8_t index,
      // ZDO response status
      sl_zigbee_zdo_status_t status)
;
{% endif -%}
{% endfor -%}


{# POLL_COMPLETE #}
// Poll Complete
void sli_zigbee_af_poll_complete(
      // An sl_status_t value: SL_STATUS_OK - Data was received in response to
      // the poll. SL_STATUS_MAC_NO_DATA - No data was pending.
      // SL_STATUS_ZIGBEE_DELIVERY_FAILED - The poll message could not be sent.
      // SL_STATUS_MAC_NO_ACK_RECEIVED - The poll message was sent but not
      // acknowledged by the parent.
      sl_status_t status)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "poll_complete" -%}
void {{ cb['function_name'] }}(
      // An sl_status_t value: SL_STATUS_OK - Data was received in response to
      // the poll. SL_STATUS_MAC_NO_DATA - No data was pending.
      // SL_STATUS_ZIGBEE_DELIVERY_FAILED - The poll message could not be sent.
      // SL_STATUS_MAC_NO_ACK_RECEIVED - The poll message was sent but not
      // acknowledged by the parent.
      sl_status_t status)
;
{% endif -%}
{% endfor -%}


{# POLL #}
// Poll
void sli_zigbee_af_poll(
      // The node ID of the child that is requesting data.
      sl_802154_short_addr_t childId,
      // True if transmit expected, false otherwise.
      bool transmitExpected)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "poll" -%}
void {{ cb['function_name'] }}(
      // The node ID of the child that is requesting data.
      sl_802154_short_addr_t childId,
      // True if transmit expected, false otherwise.
      bool transmitExpected)
;
{% endif -%}
{% endfor -%}


{# DEBUG #}
// Debug
void sli_zigbee_af_debug(
      // debug message length
      uint8_t messageLength,
      // debug message
      uint8_t *messageContents)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "debug" -%}
void {{ cb['function_name'] }}(
      // debug message length
      uint8_t messageLength,
      // debug message
      uint8_t *messageContents)
;
{% endif -%}
{% endfor -%}


{# INCOMING_MANY_TO_ONE_ROUTE_REQUEST #}
// Incoming Many To One Route Request
void sli_zigbee_af_incoming_many_to_one_route_request(
      // The short id of the concentrator.
      sl_802154_short_addr_t source,
      // The EUI64 of the concentrator.
      sl_802154_long_addr_t longId,
      // The path cost to the concentrator. The cost may decrease as additional
      // route request packets for this discovery arrive, but the callback is
      // made only once.
      uint8_t cost)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "incoming_many_to_one_route_request" -%}
void {{ cb['function_name'] }}(
      // The short id of the concentrator.
      sl_802154_short_addr_t source,
      // The EUI64 of the concentrator.
      sl_802154_long_addr_t longId,
      // The path cost to the concentrator. The cost may decrease as additional
      // route request packets for this discovery arrive, but the callback is
      // made only once.
      uint8_t cost)
;
{% endif -%}
{% endfor -%}


{# INCOMING_ROUTE_ERROR #}
// Incoming Route Error
void sli_zigbee_af_incoming_route_error(
      // SL_STATUS_ZIGBEE_SOURCE_ROUTE_FAILURE or SL_STATUS_ZIGBEE_MANY_TO_ONE_ROUTE_FAILURE.
      sl_status_t status,
      // The short id of the remote node.
      sl_802154_short_addr_t target)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "incoming_route_error" -%}
void {{ cb['function_name'] }}(
      // SL_STATUS_ZIGBEE_SOURCE_ROUTE_FAILURE or SL_STATUS_ZIGBEE_MANY_TO_ONE_ROUTE_FAILURE.
      sl_status_t status,
      // The short id of the remote node.
      sl_802154_short_addr_t target)
;
{% endif -%}
{% endfor -%}


{# INCOMING_NETWORK_STATUS #}
// Incoming Network Status
void sli_zigbee_af_incoming_network_status(
      // One byte over-the-air error code from network status message
      uint8_t errorCode,
      // The short ID of the remote node
      sl_802154_short_addr_t target)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "incoming_network_status" -%}
void {{ cb['function_name'] }}(
      // One byte over-the-air error code from network status message
      uint8_t errorCode,
      // The short ID of the remote node
      sl_802154_short_addr_t target)
;
{% endif -%}
{% endfor -%}


{# INCOMING_ROUTE_RECORD #}
// Incoming Route Record
void sli_zigbee_af_incoming_route_record(
  sl_zigbee_rx_packet_info_t *packetInfo,
  uint8_t relayCount,
  uint8_t *relayList)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "incoming_route_record" -%}
void {{ cb['function_name'] }}(
  sl_zigbee_rx_packet_info_t *packetInfo,
  uint8_t relayCount,
  uint8_t *relayList)
;
{% endif -%}
{% endfor -%}


{# ID_CONFLICT #}
// Id Conflict
void sli_zigbee_af_id_conflict(
      // The short id for which a conflict was detected
      sl_802154_short_addr_t conflictingId)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "id_conflict" -%}
void {{ cb['function_name'] }}(
      // The short id for which a conflict was detected
      sl_802154_short_addr_t conflictingId)
;
{% endif -%}
{% endfor -%}


{# MAC_PASSTHROUGH_MESSAGE #}
// Mac Passthrough Message
void sli_zigbee_af_mac_passthrough_message(
      // The type of MAC passthrough message received.
      sl_zigbee_mac_passthrough_type_t messageType,
      // RX packet info.
      sl_zigbee_rx_packet_info_t *packetInfo,
      // message length.
      uint8_t messageLength,
      // The raw message that was received.
      uint8_t *messageContents)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "mac_passthrough_message" -%}
void {{ cb['function_name'] }}(
      // The type of MAC passthrough message received.
      sl_zigbee_mac_passthrough_type_t messageType,
      // RX packet info.
      sl_zigbee_rx_packet_info_t *packetInfo,
      // message length.
      uint8_t messageLength,
      // The raw message that was received.
      uint8_t *messageContents)
;
{% endif -%}
{% endfor -%}


{# STACK_TOKEN_CHANGED #}
// Stack Token Changed
void sli_zigbee_af_stack_token_changed(
      // The address of the stack token that has changed.
      uint16_t tokenAddress)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "stack_token_changed" -%}
void {{ cb['function_name'] }}(
      // The address of the stack token that has changed.
      uint16_t tokenAddress)
;
{% endif -%}
{% endfor -%}


{# TIMER #}
// Timer
void sli_zigbee_af_timer(
      // Which timer generated the callback (0 or 1).
      uint8_t timerId)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "timer" -%}
void {{ cb['function_name'] }}(
      // Which timer generated the callback (0 or 1).
      uint8_t timerId)
;
{% endif -%}
{% endfor -%}


{# COUNTER_ROLLOVER #}
// Counter Rollover
void sli_zigbee_af_counter_rollover(
      // Type of Counter
      sl_zigbee_counter_type_t type)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "counter_rollover" -%}
void {{ cb['function_name'] }}(
      // Type of Counter
      sl_zigbee_counter_type_t type)
;
{% endif -%}
{% endfor -%}


{# RAW_TRANSMIT_COMPLETE #}
// Raw Transmit Complete
void sli_zigbee_af_raw_transmit_complete(
      // message
      uint8_t  messageLength,
      uint8_t* messageContents,
      // SL_STATUS_OK if the transmission was successful, or
      // SL_STATUS_ZIGBEE_DELIVERY_FAILED if not
      sl_status_t status)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "raw_transmit_complete" -%}
void {{ cb['function_name'] }}(
      // message
      uint8_t  messageLength,
      uint8_t* messageContents,
      // SL_STATUS_OK if the transmission was successful, or
      // SL_STATUS_ZIGBEE_DELIVERY_FAILED if not
      sl_status_t status)
;
{% endif -%}
{% endfor -%}


{# SWITCH_NETWORK_KEY #}
// Switch Network Key
void sli_zigbee_af_switch_network_key(
      // The sequence number of the new network key.
      uint8_t sequenceNumber)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "switch_network_key" -%}
void {{ cb['function_name'] }}(
      // The sequence number of the new network key.
      uint8_t sequenceNumber)
;
{% endif -%}
{% endfor -%}


{# ZIGBEE_KEY_ESTABLISHMENT #}
// Zigbee Key Establishment
void sli_zigbee_af_zigbee_key_establishment(
      // This is the IEEE address of the partner that the device successfully
      // established a key with. This value is all zeros on a failure.
      sl_802154_long_addr_t partner,
      // This is the status indicating what was established or why the key
      // establishment failed.
      sl_zigbee_key_status_t status)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "zigbee_key_establishment" -%}
void {{ cb['function_name'] }}(
      // This is the IEEE address of the partner that the device successfully
      // established a key with. This value is all zeros on a failure.
      sl_802154_long_addr_t partner,
      // This is the status indicating what was established or why the key
      // establishment failed.
      sl_zigbee_key_status_t status)
;
{% endif -%}
{% endfor -%}


{# GENERATE_CBKE_KEYS #}
// Generate Cbke Keys
void sli_zigbee_af_generate_cbke_keys(
      // The result of the CBKE operation.
      sl_status_t status,
      // Return: The generated ephemeral public key.
      sl_zigbee_public_key_data_t *ephemeralPublicKey)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "generate_cbke_keys" -%}
void {{ cb['function_name'] }}(
      // The result of the CBKE operation.
      sl_status_t status,
      // Return: The generated ephemeral public key.
      sl_zigbee_public_key_data_t *ephemeralPublicKey)
;
{% endif -%}
{% endfor -%}


{# CALCULATE_SMACS #}
// Calculate Smacs
void sli_zigbee_af_calculate_smacs(
      // The Result of the CBKE operation.
      sl_status_t status,
      // Return: The calculated value of the initiator's SMAC
      sl_zigbee_smac_data_t *initiatorSmac,
      // Return: The calculated value of the responder's SMAC
      sl_zigbee_smac_data_t *responderSmac)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "calculate_smacs" -%}
void {{ cb['function_name'] }}(
      // The Result of the CBKE operation.
      sl_status_t status,
      // Return: The calculated value of the initiator's SMAC
      sl_zigbee_smac_data_t *initiatorSmac,
      // Return: The calculated value of the responder's SMAC
      sl_zigbee_smac_data_t *responderSmac)
;
{% endif -%}
{% endfor -%}


{# DSA_SIGN #}
// Dsa Sign
void sli_zigbee_af_dsa_sign(
      // The result of the DSA signing operation.
      sl_status_t status,
      // Message length
      uint8_t messageLength,
      // The message that includes the original message and the
      // appended signature.
      uint8_t *message)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "dsa_sign" -%}
void {{ cb['function_name'] }}(
      // The result of the DSA signing operation.
      sl_status_t status,
      // Message length
      uint8_t messageLength,
      // The message that includes the original message and the
      // appended signature.
      uint8_t *message)
;
{% endif -%}
{% endfor -%}


{# DSA_VERIFY #}
// Dsa Verify
void sli_zigbee_af_dsa_verify(
      // The result of the DSA verification operation.
      sl_status_t status)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "dsa_verify" -%}
void {{ cb['function_name'] }}(
      // The result of the DSA verification operation.
      sl_status_t status)
;
{% endif -%}
{% endfor -%}


{# INCOMING_BOOTLOAD_MESSAGE #}
// Incoming Bootload Message
void sli_zigbee_af_incoming_bootload_message(
      // The EUI64 of the sending node.
      sl_802154_long_addr_t longId,
      // RX packet info.
      sl_zigbee_rx_packet_info_t *packetInfo,
      // message length.
      uint8_t messageLength,
      // The bootload message that was sent.
      uint8_t *messageContents)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "incoming_bootload_message" -%}
void {{ cb['function_name'] }}(
      // The EUI64 of the sending node.
      sl_802154_long_addr_t longId,
      // RX packet info.
      sl_zigbee_rx_packet_info_t *packetInfo,
      // message length.
      uint8_t messageLength,
      // The bootload message that was sent.
      uint8_t *messageContents)
;
{% endif -%}
{% endfor -%}


{# BOOTLOAD_TRANSMIT_COMPLETE #}
// Bootload Transmit Complete
void sli_zigbee_af_bootload_transmit_complete(
      // An sl_status_t value of SL_STATUS_OK if an ACK was received from the
      // destination or SL_STATUS_ZIGBEE_DELIVERY_FAILED if no ACK was received.
      sl_status_t status,
      // message length.
      uint8_t messageLength,
      // The bootload message that was sent.
      uint8_t *messageContents)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "bootload_transmit_complete" -%}
void {{ cb['function_name'] }}(
      // An sl_status_t value of SL_STATUS_OK if an ACK was received from the
      // destination or SL_STATUS_ZIGBEE_DELIVERY_FAILED if no ACK was received.
      sl_status_t status,
      // message length.
      uint8_t messageLength,
      // The bootload message that was sent.
      uint8_t *messageContents)
;
{% endif -%}
{% endfor -%}
   

{# ZLL_NETWORK_FOUND #}
// Zll Network Found
void sli_zigbee_af_zll_network_found(
      // Information about the network.
      sl_zigbee_zll_network_t *networkInfo,
      // Used to interpret deviceInfo field.
      bool isDeviceInfoNull,
      // Device specific information.
      sl_zigbee_zll_device_info_record_t *deviceInfo,
      // RX packet info.
      sl_zigbee_rx_packet_info_t *packetInfo)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "zll_network_found" -%}
void {{ cb['function_name'] }}(
      // Information about the network.
      sl_zigbee_zll_network_t *networkInfo,
      // Used to interpret deviceInfo field.
      bool isDeviceInfoNull,
      // Device specific information.
      sl_zigbee_zll_device_info_record_t *deviceInfo,
      // RX packet info.
      sl_zigbee_rx_packet_info_t *packetInfo)
;
{% endif -%}
{% endfor -%}


{# ZLL_SCAN_COMPLETE #}
// Zll Scan Complete
void sli_zigbee_af_zll_scan_complete(
      // Status of the operation.
      sl_status_t status)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "zll_scan_complete" -%}
void {{ cb['function_name'] }}(
      // Status of the operation.
      sl_status_t status)
;
{% endif -%}
{% endfor -%}


{# ZLL_ADDRESS_ASSIGNMENT #}
// Zll Address Assignment
void sli_zigbee_af_zll_address_assignment(
      // Address assignment information.
      sl_zigbee_zll_address_assignment_t *addressInfo,
      // Information about incoming packet.
      sl_zigbee_rx_packet_info_t *packetInfo)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "zll_address_assignment" -%}
void {{ cb['function_name'] }}(
      // Address assignment information.
      sl_zigbee_zll_address_assignment_t *addressInfo,
      // Information about incoming packet.
      sl_zigbee_rx_packet_info_t *packetInfo)
;
{% endif -%}
{% endfor -%}


{# ZLL_TOUCH_LINK_TARGET #}
// Zll Touch Link Target
void sli_zigbee_af_zll_touch_link_target(
      // Return: Information about the network.
      const sl_zigbee_zll_network_t *networkInfo)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "zll_touch_link_target" -%}
void {{ cb['function_name'] }}(
      // Return: Information about the network.
      const sl_zigbee_zll_network_t *networkInfo)
;
{% endif -%}
{% endfor -%}


{# MAC_FILTER_MATCH_MESSAGE #}
// Mac Filter Match Message
void sli_zigbee_af_mac_filter_match_message(
      // filter index match.
      uint8_t filterIndexMatch,
      // message type.
      sl_zigbee_mac_passthrough_type_t messageType,
      // RX packet info
      sl_zigbee_rx_packet_info_t *packetInfo,
      // message length.
      uint8_t messageLength,
      // message contents.
      uint8_t *messageContents)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "mac_filter_match_message" -%}
void {{ cb['function_name'] }}(
      // filter index match.
      uint8_t filterIndexMatch,
      // message type.
      sl_zigbee_mac_passthrough_type_t messageType,
      // RX packet info
      sl_zigbee_rx_packet_info_t *packetInfo,
      // message length.
      uint8_t messageLength,
      // message contents.
      uint8_t *messageContents)
;
{% endif -%}
{% endfor -%}


{# D_GP_SENT #}
// D Gp Sent
void sli_zigbee_af_d_gp_sent(
      // An sl_status_t value indicating success or the reason for failure.
      sl_status_t status,
      // The handle of the GPDF.
      uint8_t gpepHandle)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "d_gp_sent" -%}
void {{ cb['function_name'] }}(
      // An sl_status_t value indicating success or the reason for failure.
      sl_status_t status,
      // The handle of the GPDF.
      uint8_t gpepHandle)
;
{% endif -%}
{% endfor -%}


{# PAN_ID_CONFLICT #}
// Pan Id Conflict
// Return: An sl_status_t value indicating success or the reason for failure.
void sli_zigbee_af_pan_id_conflict(
      // Number of conflict reports
      int8_t conflictCount)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "pan_id_conflict" -%}
void {{ cb['function_name'] }}(
      // Number of conflict reports
      int8_t conflictCount)
;
{% endif -%}
{% endfor -%}


{# ORPHAN_NOTIFICATION #}
// Orphan Notification
void sli_zigbee_af_orphan_notification(
      // The 8 byte EUI64 of the sender.
      sl_802154_long_addr_t longId)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "orphan_notification" -%}
void {{ cb['function_name'] }}(
      // The 8 byte EUI64 of the sender.
      sl_802154_long_addr_t longId)
;
{% endif -%}
{% endfor -%}


{# MAC_PASSTHROUGH_FILTER #}
// Mac Passthrough Filter
// Return: True if mac passthrough filter was matched. False otherwise.
void sli_zigbee_af_mac_passthrough_filter(
      // Return: Mac Header of the matched messgae
      uint8_t *macHeader)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "mac_passthrough_filter" -%}
void {{ cb['function_name'] }}(
      // Return: Mac Header of the matched messgae
      uint8_t *macHeader)
;
{% endif -%}
{% endfor -%}


{# GENERATE_CBKE_KEYS_HANDLER283K1 #}
// Generate Cbke Keys Handler283k1
void sli_zigbee_af_generate_cbke_keys_handler283k1(
      // The result of the CBKE operation.
      sl_status_t status,
      // Return: The generated ephemeral public key.
      sl_zigbee_public_key_283k1_data_t *ephemeralPublicKey)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "generate_cbke_keys_handler283k1" -%}
void {{ cb['function_name'] }}(
      // The result of the CBKE operation.
      sl_status_t status,
      // Return: The generated ephemeral public key.
      sl_zigbee_public_key_283k1_data_t *ephemeralPublicKey)
;
{% endif -%}
{% endfor -%}


{# CALCULATE_SMACS_HANDLER283K1 #}
// Calculate Smacs Handler283k1
void sli_zigbee_af_calculate_smacs_283k1_handler(
      // The Result of the CBKE operation.
      sl_status_t status,
      // Return: The calculated value of the initiator's SMAC
      sl_zigbee_smac_data_t *initiatorSmac,
      // Return: The calculated value of the responder's SMAC
      sl_zigbee_smac_data_t *responderSmac)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "calculate_smacs_handler283k1" -%}
void {{ cb['function_name'] }}(
      // The Result of the CBKE operation.
      sl_status_t status,
      // Return: The calculated value of the initiator's SMAC
      sl_zigbee_smac_data_t *initiatorSmac,
      // Return: The calculated value of the responder's SMAC
      sl_zigbee_smac_data_t *responderSmac)
;
{% endif -%}
{% endfor -%}


{# GPEP_INCOMING_MESSAGE #}
// Gpep Incoming Message
void sli_zigbee_af_gpep_incoming_message(
      // The status of the GPDF receive.
      sl_zigbee_gp_status_t status,
      // The gpdLink value of the received GPDF.
      uint8_t gpdLink,
      // The GPDF sequence number.
      uint8_t sequenceNumber,
      // The address of the source GPD.
      sl_zigbee_gp_address_t *addr,
      // The security level of the received GPDF.
      sl_zigbee_gp_security_level_t gpdfSecurityLevel,
      // The securityKeyType used to decrypt/authenticate the incoming GPDF.
      sl_zigbee_gp_key_type_t gpdfSecurityKeyType,
      // Whether the incoming GPDF had the auto-commissioning bit set.
      bool autoCommissioning,
      // Bidirectional information represented in bitfields, where bit0 holds
      // the rxAfterTx of incoming gpdf and bit1 holds if tx queue is available
      // for outgoing gpdf.
      uint8_t bidirectionalInfo,
      // The security frame counter of the incoming GDPF.
      uint32_t gpdSecurityFrameCounter,
      // The gpdCommandId of the incoming GPDF.
      uint8_t gpdCommandId,
      // The received MIC of the GPDF.
      uint32_t mic,
      // The proxy table index of the corresponding proxy table entry to the
      // incoming GPDF.
      uint8_t proxyTableIndex,
      // The length of the GPD command payload.
      uint8_t gpdCommandPayloadLength,
      // The GPD command payload.
      uint8_t *gpdCommandPayload)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "gpep_incoming_message" -%}
void {{ cb['function_name'] }}(
      // The status of the GPDF receive.
      sl_zigbee_gp_status_t status,
      // The gpdLink value of the received GPDF.
      uint8_t gpdLink,
      // The GPDF sequence number.
      uint8_t sequenceNumber,
      // The address of the source GPD.
      sl_zigbee_gp_address_t *addr,
      // The security level of the received GPDF.
      sl_zigbee_gp_security_level_t gpdfSecurityLevel,
      // The securityKeyType used to decrypt/authenticate the incoming GPDF.
      sl_zigbee_gp_key_type_t gpdfSecurityKeyType,
      // Whether the incoming GPDF had the auto-commissioning bit set.
      bool autoCommissioning,
      // Bidirectional information represented in bitfields, where bit0 holds
      // the rxAfterTx of incoming gpdf and bit1 holds if tx queue is available
      // for outgoing gpdf.
      uint8_t bidirectionalInfo,
      // The security frame counter of the incoming GDPF.
      uint32_t gpdSecurityFrameCounter,
      // The gpdCommandId of the incoming GPDF.
      uint8_t gpdCommandId,
      // The received MIC of the GPDF.
      uint32_t mic,
      // The proxy table index of the corresponding proxy table entry to the
      // incoming GPDF.
      uint8_t proxyTableIndex,
      // The length of the GPD command payload.
      uint8_t gpdCommandPayloadLength,
      // The GPD command payload.
      uint8_t *gpdCommandPayload)
;
{% endif -%}
{% endfor -%}


{# RTOS_IDLE #}
// Rtos Idle
// Return: True or False.
void sli_zigbee_af_rtos_idle(
      // Return: Idle time duration
      uint32_t *idleTimeMs)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "rtos_idle" -%}
void {{ cb['function_name'] }}(
      // Return: Idle time duration
      uint32_t *idleTimeMs)
;
{% endif -%}
{% endfor -%}


{# RTOS_STACK_WAKEUP_ISR #}
// Rtos Stack Wakeup Isr
void sli_zigbee_common_wakeup_isr(void)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "rtos_stack_wakeup_isr" -%}
void {{ cb['function_name'] }}(void)
;
{% endif -%}
{% endfor -%}


{# RADIO_NEEDS_CALIBRATING #}
// Radio Needs Calibrating
void sli_zigbee_af_radio_needs_calibrating(void)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "radio_needs_calibrating" -%}
void {{ cb['function_name'] }}(void)
;
{% endif -%}
{% endfor -%}


{# SCAN_ERROR #}
// Scan Error
void sli_zigbee_af_scan_error(
      // The error status of a scan
      sl_status_t status)
;
{% for cb in zigbee_stack_callback -%}
{% if cb['callback_type'] == "scan_error" -%}
void {{ cb['function_name'] }}(
      // The error status of a scan
      sl_status_t status)
;
{% endif -%}
{% endfor -%}

